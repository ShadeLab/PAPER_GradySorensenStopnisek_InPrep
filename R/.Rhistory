# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
install.packages(c("RSQLitet", "tidyverse"))
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019/R")
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019/R")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
# Read in OTU table
otu <- read.table("InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
#Preping the environmental metadata
glbrc <- dbConnect(SQLite(), dbname="R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_plot, glbrc_sampling, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
unique(metadata$nucleic_acid_name)
map <- metadata
dim(map)
map_16 <- subset(map, map$primers == 'EMP V4')
dim(map_16)
head(map_16)
map_16 <- subset(map, map$primers == 'EMP V4')
dim(map_16)
head(map_16)
map_16$help_name = as.character(lapply(strsplit(as.character(map_16$nucleic_acid_name), split="D"), "[", 1))
unique(map_16$help_name)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
#Preping the environmental metadata
glbrc <- dbConnect(SQLite(), dbname="R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_plot, glbrc_sampling, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
source('~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019/R/Workflow_GLBRC16S.R', echo=TRUE)
map_full <- metadata
map_full$sampling_date <- paste0(map_full$month,'-', map_full$day,'-',map_full$year)
map_full$sampling_date <- as.POSIXct(map_full$sampling_date, format='%m-%d-%Y')
time <- as.POSIXct(map_full$sampling_date, format='%m-%d-%Y')
time_numeric <- as.numeric(time)
map_time <- cbind(map_full, time_numeric)
#adding weather data
weather <- read.csv('R/InputFiles/kbs_weather_09212017.csv', encoding = 'UTF-8', na.strings= c("NA", " ", ""))
dim(weather)
head(weather)
weather$sampling_date <- as.POSIXct(weather$date, format='%d.%m.%y')
sub_weather <- weather[weather$sampling_date %in% map_time$sampling_date,] #subsetting weather file for sample dates
#merging dataframes - map file and weather
map_complete <- full_join(map_time, weather)
#Subset to 16S Samples
map_16S <- subset(map_complete, map_complete$primers=="EMP V4")
#Subset to 16S Samples
map_16S <- subset(map_complete, map_complete$primers=="EMP V4", exclude_from_analysis == "N" & sequencing_type == "Illumina 16S iTag")
View(map_16S)
#Subset to 16S Samples
map_16S <- subset(map_complete, map_complete$primers=="EMP V4", map_complete$exclude_from_analysis == "N" & map_complete$sequencing_type == "Illumina 16S iTag")
View(map_complete)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
#Preping the environmental metadata
glbrc <- dbConnect(SQLite(), dbname="R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_plot, glbrc_sampling, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
map_full <- metadata
View(map_full)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
#Preping the environmental metadata
glbrc <- dbConnect(SQLite(), dbname="R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_plot, glbrc_sampling, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
map_full <- metadata
View(map_full)
View(glbrc_sequncing)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Read in OTU table
otu <- read.table("R/InputFiles/table_combined_merged_trimmed_otus.txt",sep="\t", header=TRUE, stringsAsFactors = FALSE, row.names=1)
#Preping the environmental metadata
glbrc <- dbConnect(SQLite(), dbname="R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_plot, glbrc_sampling, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
map_full <- metadata
View(metadata)
# Total R Code for GLBRC
### Start Common
### DIRECTIONS, SET WORKING DIRECTORY TO "PAPER_GradySorensenStopnisek_InPrep/R"
### Before working on Analysis, run the entire Common block of Code (all the way until "### End Common")
setwd("~/Documents/Github/PAPER_GradySorensenStopnisek_NatComm_2019")
library(dplyr)
library(tidyr)
library(reshape2)
library(RSQLite)
library(stringr)
# Preping the environmental metadata
glbrc <- dbConnect(RSQLite::SQLite(), "R/InputFiles/GLBRC_bioenergy_db.db" )
#Content of the DB
dbListTables(glbrc)
#Content of selected tables in the DB
dbListFields(glbrc, 'plant')
dbListFields(glbrc, 'sequencing')
dbListFields(glbrc, 'soil')
dbListFields(glbrc, 'nucleic_acids')
dbListFieldss(glbrc, 'plot')
#get tables into R
glbrc_NA <- dbGetQuery(glbrc, "select * from nucleic_acids")
glbrc_soil <- dbGetQuery(glbrc, 'select * from soil')
glbrc_plant <- dbGetQuery(glbrc, 'select * from plant')
glbrc_plot <- dbGetQuery(glbrc, 'select * from plot')
glbrc_sampling <- dbGetQuery(glbrc, 'select * from sampling')
glbrc_sequncing <- dbGetQuery(glbrc, 'select * from sequencing')
glbrc_sequncing <- glbrc_sequncing %>%
mutate(nucleic_acid_name = str_trim(glbrc_sequncing$nucleic_acid_name, side = "both"))
#joining tables to create complete map file
metadata <- full_join(glbrc_sampling, glbrc_plot, by='plotID')
metadata <- full_join(metadata, glbrc_soil, by='sampleID')
metadata <- full_join(metadata, glbrc_plant, by='sampleID')
metadata <- full_join(metadata, glbrc_NA, by='sampleID')
metadata <- full_join(metadata, glbrc_sequncing, by='nucleic_acid_name')
map_full <- metadata
# #creating numeric time column
map_full$sampling_date <- paste0(map_full$month,'-', map_full$day,'-',map_full$year)
map_full$sampling_date <- as.POSIXct(map_full$sampling_date, format='%m-%d-%Y')
time <- as.POSIXct(map_full$sampling_date, format='%m-%d-%Y')
time_numeric <- as.numeric(time)
map_time <- cbind(map_full, time_numeric)
#adding weather data
weather <- read.csv("R/InputFiles/kbs_weather_09212017.csv", encoding = 'UTF-8')
dim(weather)
head(weather)
weather$sampling_date <- as.POSIXct(weather$date, format='%d.%m.%y')
#subsetting weather file for sample dates
sub_weather <- weather[weather$sampling_date %in% map_time$sampling_date,]
#merging dataframes - map file and weather
map_complete <- full_join(map_time, weather)
map_complete
#Subset to 16S Samples
map_16S <- subset(map_complete, map_complete$primers=="EMP V4", map_complete$exclude_from_analysis == "N" & map_complete$sequencing_type == "Illumina 16S iTag")
#Subset to 16S Samples
map_16S <- subset(map_complete,map_complete$sequencing_type == "Illumina 16S iTag")
map_16S
View(map_16S)
#Subset to 16S Samples
map_16S <- subset(map_complete, sequencing_type == "Illumina 16S iTag")
#Subset to 16S Samples
map_16S <- subset(map_complete, sequencing_type == "Illumina 16S iTag", map_complete$exclude_from_analysis == "N" )
View(map_16S)
View(map_16S)
